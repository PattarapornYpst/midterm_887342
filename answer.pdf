สอบกลางภาค
11. ตอบ	version Control ยังเป็นตัวกลางที่ทำให้ source code ของแต่ละเครื่อง (แต่ละ programmer) มี source code ที่ตรงกันด้วย ซึ่งโดยปกติทั่วไปแล้ว programmer มักจะทำโปรแกรมให้เสร็จสมบูรณ์ และใช้งานได้ก่อน จึงค่อยโยนขึ้นไปที่ repository เพื่อให้คนอื่นดึงไปใช้ต่อไป
	Version Control ตัวที่เด่นดังอยู่ตอนนี้ก็มีอยู่ 2 ตัว คือ Subversion(SVN) และ Git ซึ่งผมเองก็ได้ใช้มาแล้วทั้ง 2 ตัว แต่จะเต็มรูปแบบกับ SVN ซะมากกว่า
	local / remote เป็นคำที่มักใช้เรียกแทน repository ในเครื่องเรา(local) และ repository บน server(remote) ซึ่ง remote จะเป็นตัวกลางระหว่างทีม
12. ตอบ	Git เป็น version control แบบ distributed คือ หลังจากที่ clone remote repo. มาแล้ว ก็เท่ากับว่าเรามี local repo. ที่เหมือนกันกับ remote repo. ด้วย จะ commit ก็สามารถทำได้แบบ offline เลยเพราะเป็นการ commit ไปที่ local repo. แต่ถ้าเราจะ push ไปไว้ที่ remote repo. แน่นอนว่าต้องเชื่อมต่อ network
13. ตอบ	SVN เป็น version control แบบ centralized หมายความว่า ทุกอย่างจะถูกเก็บในตัวกลาง ซึ่งก็คือ remote repo. ทั้งหมด ทำใช้งานจำเป็นต้องเชื่อมต่อ network ไปยัง repo. ไม่เช่นนั้นก็จะ commit หรือ check revision ก่อนๆ ไม่ได้เลย
14. ตอบ	อาจจะเกิด conflict หรือข้อขัดแย้งของการเปลี่ยนแปลง ดังนั้น คุณจะต้องทำการแก้ไขข้อขัดแย้งเหล่านั้นด้วยตัวเองต่อจากนั้นให้ทำการบันทึกการเปลี่ยนแปลงด้วยคำสั่ง git add <filename>
แต่ก่อนที่จะ merge การเปลี่ยนแปลง สามารถตรวจสอบความแตกต่างของสิ่งที่แก้ไข ด้วยคำสั่ง
git diff <source_branch> <target_branch>
15. ตอบ	สามารถดึงการเปลี่ยนแปลงล่าสุดจาก remote repository มายัง local repository ด้วยคำสั่ง 
git pullโดย git จะทำการ ดึงข้อมูล และ รวมข้อมูล การเปลี่ยนแปลงจาก remote repository ในเครื่องของคุณ 
ถ้าต้องการ merge การเปลี่ยนแปลงจาก branch อื่นมายัง branch ปัจจุบัน (เช่น master) ด้วยคำสั่ง git merge <branch> ซึ่งทั้งสองคำสั่ง ทำการ merge อย่างอัตโนมัติ
16. ตอบ	Git คือ Version Control ตัวหนึ่ง เป็นระบบที่มีหน้าที่ในการจัดเก็บการเปลี่ยนแปลงของไฟล์ในโปรเจ็คเรา มีการ backup code ให้เรา สามารถที่จะเรียกดูเวอร์ชั่นต่างๆของโปรเจ็คที่ใด เวลาใดก็ได้ 
	 Github เป็นเว็บเซิฟเวอร์ที่ให้บริการในการฝากไฟล์ Git
17. ตอบ	Branch นั้นถูกใช้เพื่อแยกการพัฒนาความสามารถใหม่ๆ ออกมาจากส่วนหลัก โดยที่ git มี master branch มาให้อยู่แล้ว หลังจากทำการสร้าง git repository ขึ้นมาในการใช้ branch เพื่อแยกการพัฒนานั้น จะต้องทำการ merge การเปลี่ยนแปลงเข้ามายัง master branch หลังจากที่พัฒนาเสร็จแล้วเสมอ
18. ตอบ 	Fast-forward ไม่มีการสร้าง commit object ใหม่ขึ้นมา
การ Merge Branch บน Git นั้น หาก Commit สุดท้ายของ Branch ปลายทาง เป็น Commit เดียวกับจุดที่แยก Branch ออกมา การ Merge จะได้ผลเป็นแบบFast-forward
Merge Branch  ไปยัง master จะเป็นการ Merge แบบ Fast-forward จะเห็นว่า Branch master ไปอยู่ที่ Commit เดียวกับ Branch  และสายของ Commit เป็นเส้นตรง
	หากต้องการกำหนดให้กับทุก Repo สามารถกำหนดไปที่ Global config ด้วยคำสั่งดังนี้ 
git config --global merge.ff no แต่หากต้องการกำหนดให้กับบาง Repo ก็กำหนดไปที่ Local config ด้วยคำสั่ง git config --local merge.ff no หลังจากนั้น ก็สามารถสั่ง Merge แบบไม่เอา Fast-forward ได้ตลอดไปแล้ว
19. ตอบ	 git pull คือการ remote ไฟล์มายัง local โดยคำสั่ง git pull นั้นจะทำการ git fetch และ git merge ไปด้วย โดยเราจะมักเห็นใช้ git pull –rebase เพื่อทำการเปลี่ยนฐานแทนการ merge
20. ตอบ	การแตก branch ใน Git  เกือบทุก VCS support การแตก branch ทางใดซักทางหนึ่ง การแตก Branch หมายถึงคุณแยกตัวออกมาจาก main line ของการพัฒนาและทำงานต่อไปบนบนนั้นโดยไม่ไปยุ่งเกี่ยวกับ main line ในหลายๆ VCS การทำแบบนี้ค่อนข้างจะเปลือง ส่วนใหญ่จะเป็นการ copy ทั้ง directory ของ source code ซึ่งจะกินเวลานานมว๊ากกบน project ใหญ่ๆหลายคนเรียกการแตก branch ใน Git เป็น “killer feature” และมันทำให้ Git โดดเด่นออกมาจาก VCS อื่นๆ ทำไมน่ะเหรอ? เพราะวิธีที่ Git แตก branch มันถูกโคตร การแตก branch ทำได้ในชั่วพริบตาและการ switch ไปๆมาๆระหว่าง branch ก็เร็วพอๆกัน ไม่เหมือน VCS ดาษๆทั่วไป Git ผลักดันกระบวนการทำงาน workflow ให้แตก branch และ merge บ่อยๆแบบที่ทำได้วันละหลายๆครั้ง การทำความเข้าใจและบรรลุ feature นี้จะทำให้ Git กลายเป็นเครื่องมือที่ทรงพลังและมีเอกลักษณ์และทำให้วิถีการทำงานของคุณเปลี่ยนไปเลย


